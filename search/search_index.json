{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Autonomous Vehicle Simulator Download Monodrive Making autonomous vehicles drive safe Generation of realistic scenarios and resulting sensor information for perception and planning system validation. - Low latency networked vehicle control - Parameterized vehicle dynamics models with run time physics modification - Fast scenario regeneration, with super realtime replay - Paramaterized and accurate real time sensor emulation HOW IT WORKS monodrive\u2019s platform is designed to automate scenario test generation for planning testing.","title":"Home"},{"location":"#autonomous-vehicle-simulator","text":"","title":"Autonomous Vehicle Simulator"},{"location":"#download-monodrive","text":"","title":"Download Monodrive"},{"location":"#making-autonomous-vehicles-drive-safe","text":"Generation of realistic scenarios and resulting sensor information for perception and planning system validation. - Low latency networked vehicle control - Parameterized vehicle dynamics models with run time physics modification - Fast scenario regeneration, with super realtime replay - Paramaterized and accurate real time sensor emulation","title":"Making autonomous vehicles drive safe"},{"location":"#how-it-works","text":"monodrive\u2019s platform is designed to automate scenario test generation for planning testing.","title":"HOW IT WORKS"},{"location":"Base-Sensor/","text":"Parameter Format Every sensor follows the following format as the base for what you can do with a sensor. The individual sensor pages will explain their own parameters in addition to these base parameters. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float } type : The values of type can be: MultiCamera , Camera , Semantic , Lidar , IMU , GPS , RPM , Radar , Waypoint , or BoundingBox depending on what type of sensor you are trying to set up. id : This value can be any string, but needs to be unique for that sensor. packet_size : An integer that is the packet size of the UDP packet to be transferred from the simulator to the client. listen_port : The TCP or UDP port that the simulator must send the data through for that sensor to get the data to the client. display_process : Should the client create a process to display the sensors data. sensor_process : Should the client create a process for the sensor to read data coming from the simulator. location : The relative location for which the sensor will be placed on the vehicle. x : The x position. y : The y position. z : The z position. rotation : The relative rotation the sensor will have on the vehicle. pitch : The pitch. yaw : The yaw. roll : The roll. fps : The number of times the sensor will sample per second. How to listen for sensor data Getting a reference to a sensor Use the sensors list on the BaseVehicle class to access a list of all the sensor instances Each sensor has a type attribute that is defined in the config, (Waypoint, Camera, GPS, etc.) Each sensor has a name attribute that follows this format , this is to get a specific sensor I.E. If a sensor's type is Camera and it's port is 8086 it's name attribute will be Camera_8086 Listening to a sensor's data queue Each sensor has two data queues and methods that provide each frame of data. One queue is intended for data processing while the other is intended for display purposes. Calling get_message() or get_dislpay_message() on the sensor instance will return the most up to date data frame for that sensor from the simulator Calling get_messages() or get_display_messages() will return a list of data frames that are currently available in the sensor queues (the newest frame being the first in the list) Example: 1. Get the single Waypoint sensor based on the sensor's type attribute, getting this sensor based on type is fine in this instance because there is only one Waypoint sensor in the vehicle configuration 2. Get a unique Camera sensor using the sensor's name attribute, using the name attribute is necessary in this instance because most configurations will have multiple cameras, using the name attribute will get a specific Camera def plan_control_data(self, vehicle): waypoint = None camera = None for sensor in vehicle.sensors: if sensor.type == 'Waypoint': waypoint = sensor if sensor.name == 'Camera_8086': camera = sensor data_waypoint = waypoint.get_message() data_camera = camera.get_message() # The data in data_waypoint and data_camera is a dictionary. # For example: speed = data_waypoint['speed'] # More information on what keys for the dictionary on the individual sensor pages.","title":"Common"},{"location":"Base-Sensor/#parameter-format","text":"Every sensor follows the following format as the base for what you can do with a sensor. The individual sensor pages will explain their own parameters in addition to these base parameters. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float } type : The values of type can be: MultiCamera , Camera , Semantic , Lidar , IMU , GPS , RPM , Radar , Waypoint , or BoundingBox depending on what type of sensor you are trying to set up. id : This value can be any string, but needs to be unique for that sensor. packet_size : An integer that is the packet size of the UDP packet to be transferred from the simulator to the client. listen_port : The TCP or UDP port that the simulator must send the data through for that sensor to get the data to the client. display_process : Should the client create a process to display the sensors data. sensor_process : Should the client create a process for the sensor to read data coming from the simulator. location : The relative location for which the sensor will be placed on the vehicle. x : The x position. y : The y position. z : The z position. rotation : The relative rotation the sensor will have on the vehicle. pitch : The pitch. yaw : The yaw. roll : The roll. fps : The number of times the sensor will sample per second.","title":"Parameter Format"},{"location":"Base-Sensor/#how-to-listen-for-sensor-data","text":"Getting a reference to a sensor Use the sensors list on the BaseVehicle class to access a list of all the sensor instances Each sensor has a type attribute that is defined in the config, (Waypoint, Camera, GPS, etc.) Each sensor has a name attribute that follows this format , this is to get a specific sensor I.E. If a sensor's type is Camera and it's port is 8086 it's name attribute will be Camera_8086 Listening to a sensor's data queue Each sensor has two data queues and methods that provide each frame of data. One queue is intended for data processing while the other is intended for display purposes. Calling get_message() or get_dislpay_message() on the sensor instance will return the most up to date data frame for that sensor from the simulator Calling get_messages() or get_display_messages() will return a list of data frames that are currently available in the sensor queues (the newest frame being the first in the list) Example: 1. Get the single Waypoint sensor based on the sensor's type attribute, getting this sensor based on type is fine in this instance because there is only one Waypoint sensor in the vehicle configuration 2. Get a unique Camera sensor using the sensor's name attribute, using the name attribute is necessary in this instance because most configurations will have multiple cameras, using the name attribute will get a specific Camera def plan_control_data(self, vehicle): waypoint = None camera = None for sensor in vehicle.sensors: if sensor.type == 'Waypoint': waypoint = sensor if sensor.name == 'Camera_8086': camera = sensor data_waypoint = waypoint.get_message() data_camera = camera.get_message() # The data in data_waypoint and data_camera is a dictionary. # For example: speed = data_waypoint['speed'] # More information on what keys for the dictionary on the individual sensor pages.","title":"How to listen for sensor data"},{"location":"Bounding-Box/","text":"Bounding Box Sensor The configuration for a bounding box sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float } Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_bounding_box = bounding_box.get_message() Parsed Bounding Box Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. distances (List >): Distances of targets from the Ego vehicle location. angles (List >): Angles of targets relative to Ego vehicle's forward direction x_points (List >): X points of targets relative to Ego vehicle's location y_points (List >): Y points of targets relative to Ego vehicle's location x_bounds (List >): Bounds of targets in the x direction, target widths y_bounds (List >): Bounds of targets in the y direction, target lengths box_rotations(List >): Rotation of targets relative to the Ego vehicle's rotation. velocities (List >): Velocities of targets relative to the Ego Vehicle's speed radar_distances (List >): Distances of targets from the Ego vehicle location that are in the Radar's FOV. radar_angles (List >): Angles of targets relative to Ego vehicle's forward direction that are in the Radar's FOV radar_velocities (List >): Velocities of targets relative to the Ego Vehicle's speed that are in the Radar's FOV. Raw Output Data Format Parsed in BoundingBox.digest_frame() Bytes 0-2: Start Bytes Bytes 2-6: Number of targets. 0...NumberOfTargets as i: Bytes 6+25i-10+25i: Distance bits represented as a float in single precision IEEE-754 format. Bytes 10+25i-14+25i: Origin rotator yaw bits represented as a float in single precision IEEE-754 format. Bytes 14+25i-18+25i: Bounds extent x bits represented as a float in single precision IEEE-754 format. Bytes 18+25i-22+25i: Bounds extent y bits represented as a float in single precision IEEE-754 format. Bytes 22+25i-26+25i: Relative rotation yaw bits represented as a float in single precision IEEE-754 format. Bytes 26+25i-30+25i: Relative speed bits represented as a float in single precision IEEE-754 format. Byte 30+25i-31+25i: Bool bit whether or not target is in field of view of the radar.","title":"Bounding Box"},{"location":"Bounding-Box/#bounding-box-sensor","text":"The configuration for a bounding box sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float }","title":"Bounding Box Sensor"},{"location":"Bounding-Box/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_bounding_box = bounding_box.get_message()","title":"Output Data"},{"location":"Bounding-Box/#parsed-bounding-box-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. distances (List >): Distances of targets from the Ego vehicle location. angles (List >): Angles of targets relative to Ego vehicle's forward direction x_points (List >): X points of targets relative to Ego vehicle's location y_points (List >): Y points of targets relative to Ego vehicle's location x_bounds (List >): Bounds of targets in the x direction, target widths y_bounds (List >): Bounds of targets in the y direction, target lengths box_rotations(List >): Rotation of targets relative to the Ego vehicle's rotation. velocities (List >): Velocities of targets relative to the Ego Vehicle's speed radar_distances (List >): Distances of targets from the Ego vehicle location that are in the Radar's FOV. radar_angles (List >): Angles of targets relative to Ego vehicle's forward direction that are in the Radar's FOV radar_velocities (List >): Velocities of targets relative to the Ego Vehicle's speed that are in the Radar's FOV.","title":"Parsed Bounding Box Data Dictionary Keys and Values."},{"location":"Bounding-Box/#raw-output-data-format-parsed-in-boundingboxdigest_frame","text":"Bytes 0-2: Start Bytes Bytes 2-6: Number of targets. 0...NumberOfTargets as i: Bytes 6+25i-10+25i: Distance bits represented as a float in single precision IEEE-754 format. Bytes 10+25i-14+25i: Origin rotator yaw bits represented as a float in single precision IEEE-754 format. Bytes 14+25i-18+25i: Bounds extent x bits represented as a float in single precision IEEE-754 format. Bytes 18+25i-22+25i: Bounds extent y bits represented as a float in single precision IEEE-754 format. Bytes 22+25i-26+25i: Relative rotation yaw bits represented as a float in single precision IEEE-754 format. Bytes 26+25i-30+25i: Relative speed bits represented as a float in single precision IEEE-754 format. Byte 30+25i-31+25i: Bool bit whether or not target is in field of view of the radar.","title":"Raw Output Data Format Parsed in BoundingBox.digest_frame()"},{"location":"Camera/","text":"Camera Sensor The configuration for a camera sensor that streams camera data and renders it into a view created by the client. \"semantic_processing\": false \"semantic_processing\": true { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"max_distance\": float, \"horizontal_fov_angle\": float, \"fps\": int, \"stream_dimensions\": { \"x\": float, \"y\": float }, \"semantic_processing\": bool, \"hdmi_streaming\": bool } hdmi_streaming : A boolean representing whether the camera data gets streamed the HDMI, or the default of TCP. stream_dimensions : The dimensions of which the stream will stream over TCP. These dimensions are set in a dictionary with keys x and y with float values. max_distance : The max distance, in centimeters, the simulator's camera will look forward in the world. horizontal_fov_angle : The horizontal field of view angle, in degrees, of the simulator's camera. semantic_processing : A boolean that determines whether the camera will act as a semantic camera or a normal camera. Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_camera= camera.get_message() Parsed Camera Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. image (List >>): A 3D list that represents a single image following the format of stream_dimensions_x x stream_dimensions_y x 4","title":"Camera"},{"location":"Camera/#camera-sensor","text":"The configuration for a camera sensor that streams camera data and renders it into a view created by the client. \"semantic_processing\": false \"semantic_processing\": true { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"max_distance\": float, \"horizontal_fov_angle\": float, \"fps\": int, \"stream_dimensions\": { \"x\": float, \"y\": float }, \"semantic_processing\": bool, \"hdmi_streaming\": bool } hdmi_streaming : A boolean representing whether the camera data gets streamed the HDMI, or the default of TCP. stream_dimensions : The dimensions of which the stream will stream over TCP. These dimensions are set in a dictionary with keys x and y with float values. max_distance : The max distance, in centimeters, the simulator's camera will look forward in the world. horizontal_fov_angle : The horizontal field of view angle, in degrees, of the simulator's camera. semantic_processing : A boolean that determines whether the camera will act as a semantic camera or a normal camera.","title":"Camera Sensor"},{"location":"Camera/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_camera= camera.get_message()","title":"Output Data"},{"location":"Camera/#parsed-camera-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. image (List >>): A 3D list that represents a single image following the format of stream_dimensions_x x stream_dimensions_y x 4","title":"Parsed Camera Data Dictionary Keys and Values."},{"location":"Configuration/","text":"The monoDrive simulator is configured from the Client. Everything about the simulator can be configured, from the material properties, to the vehicle properties, to the sensor properties. For examples on how to start the Client with custom configurations refer here and read more about the configurations for the simulator , vehicle , and sensors .","title":"System"},{"location":"GPS/","text":"GPS Sensor The configuration for a GPS sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float } Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_gps = gps.get_message() Parsed GPS Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. lat(float): Latitude of Ego vehicle. lng(float): Longitude of Ego vehicle. Raw Output Data Format Parsed in GPS.digest_frame() Following the data format found here . Byte 0-1: Start Byte Bytes 1-3: MSG_POS_LLH Bytes 3-5: Hash of the sensor id. Byte 5-6: Length of the payload. Bytes 6-14: Latitude bits represented as a double in double precision IEEE-754 format. Bytes 14-22: Longitude bits represented as a double in double precision IEEE-754 format. Bytes 22-30: Elevation bits represented as a double in double precision IEEE-754 format. Bytes 30-32: Horizontal accuracy, in millimeters. Bytes 32-34: Vertical accuracy, in millimeters. Byte 34-35: Number of satellites used for signal. Byte 35-36: Fixed more status. Byte 36-37: CRC.","title":"GPS"},{"location":"GPS/#gps-sensor","text":"The configuration for a GPS sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float }","title":"GPS Sensor"},{"location":"GPS/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_gps = gps.get_message()","title":"Output Data"},{"location":"GPS/#parsed-gps-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. lat(float): Latitude of Ego vehicle. lng(float): Longitude of Ego vehicle.","title":"Parsed GPS Data Dictionary Keys and Values."},{"location":"GPS/#raw-output-data-format-parsed-in-gpsdigest_frame","text":"Following the data format found here . Byte 0-1: Start Byte Bytes 1-3: MSG_POS_LLH Bytes 3-5: Hash of the sensor id. Byte 5-6: Length of the payload. Bytes 6-14: Latitude bits represented as a double in double precision IEEE-754 format. Bytes 14-22: Longitude bits represented as a double in double precision IEEE-754 format. Bytes 22-30: Elevation bits represented as a double in double precision IEEE-754 format. Bytes 30-32: Horizontal accuracy, in millimeters. Bytes 32-34: Vertical accuracy, in millimeters. Byte 34-35: Number of satellites used for signal. Byte 35-36: Fixed more status. Byte 36-37: CRC.","title":"Raw Output Data Format Parsed in GPS.digest_frame()"},{"location":"IMU/","text":"IMU Sensor The configuration for an IMU sensor. { \"type\": \"IMU\", \"id\": \"1\", \"packet_size\": 1472, \"listen_port\": 8083, \"display_process\": true, \"sensor_process\": true, \"location\": { \"x\":-75.0, \"y\":-25.0, \"z\":245.0 }, \"rotation\": { \"pitch\":0.0, \"yaw\":0.0, \"roll\":0.0 }, \"fps\": 5.0 } Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_waypoint = imu_sensor.get_message() Parsed IMU Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. acceleration_vector (List >): Acceleration vector of the Ego Vehicle. angular_velocity_vector (List >): Angular velocity vector of the Ego Vehicle. timer (int): Timer based on this protocol . Raw Output Data Format Parsed in IMU.digest_frame() Following the data format found here . Byte 0-1: Start Byte Bytes 1-5: x acceleration bits represented as a float in single precision IEEE-754 format. Bytes 5-9: y acceleration bits represented as a float in single precision IEEE-754 format. Byte 9-13: z acceleration bits represented as a float in single precision IEEE-754 format. Bytes 13-17: x angular velocity bits represented as a float in single precision IEEE-754 format. Bytes 17-21: y angular velocity bits represented as a float in single precision IEEE-754 format. Bytes 21-25: z angular velocity bits represented as a float in single precision IEEE-754 format. Bytes 25-29: Timestamp as indicated in the above link. Bytes 29-31: Checksum. Byte 31-35: Time of week.","title":"IMU"},{"location":"IMU/#imu-sensor","text":"The configuration for an IMU sensor. { \"type\": \"IMU\", \"id\": \"1\", \"packet_size\": 1472, \"listen_port\": 8083, \"display_process\": true, \"sensor_process\": true, \"location\": { \"x\":-75.0, \"y\":-25.0, \"z\":245.0 }, \"rotation\": { \"pitch\":0.0, \"yaw\":0.0, \"roll\":0.0 }, \"fps\": 5.0 }","title":"IMU Sensor"},{"location":"IMU/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_waypoint = imu_sensor.get_message()","title":"Output Data"},{"location":"IMU/#parsed-imu-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. acceleration_vector (List >): Acceleration vector of the Ego Vehicle. angular_velocity_vector (List >): Angular velocity vector of the Ego Vehicle. timer (int): Timer based on this protocol .","title":"Parsed IMU Data Dictionary Keys and Values."},{"location":"IMU/#raw-output-data-format-parsed-in-imudigest_frame","text":"Following the data format found here . Byte 0-1: Start Byte Bytes 1-5: x acceleration bits represented as a float in single precision IEEE-754 format. Bytes 5-9: y acceleration bits represented as a float in single precision IEEE-754 format. Byte 9-13: z acceleration bits represented as a float in single precision IEEE-754 format. Bytes 13-17: x angular velocity bits represented as a float in single precision IEEE-754 format. Bytes 17-21: y angular velocity bits represented as a float in single precision IEEE-754 format. Bytes 21-25: z angular velocity bits represented as a float in single precision IEEE-754 format. Bytes 25-29: Timestamp as indicated in the above link. Bytes 29-31: Checksum. Byte 31-35: Time of week.","title":"Raw Output Data Format Parsed in IMU.digest_frame()"},{"location":"Installation/","text":"monoDrive client installation Linux Install monoDrive Simulator pip install virtualenv cd client virtualenv venv venv\\Scripts\\activate pip install -e . --upgrade python -c \"import monodrive; print('Success')\" python examples\\test.py Windows Install monoDrive Simulator Install Windows Desktop git clone https://github.com/monoDriveIO/client.git Python 3.5 is required for monoDrive Windows client Download Python 3.5 DOS Prompt (for Pycharm see below) Setup Python Path -Go to Control Panel\\System and Security\\System select Advanced system settings from the left panel from Advanced tab click on Environment Variables In the System variables section search for (create if doesn't exist) PYTHONPATH and set C:\\Python35\\;C:\\Python35\\Scripts; You need to restart CMD. Verify that worked which python result:[path to the python you installed above] pip install virtualenv cd client virtualenv venv venv\\Scripts\\activate pip install -e . --upgrade python -c \"import monodrive; print('Success')\" python examples\\test.py Pycharm (optional) Download PyCharm Community Edition and Install. Clone PythonClient . Open the root directory of the repo in PyCharm. Go to File then Settings . Expand the Project: PythonClient and select Project Interpreter . Click the gear icon in the upper right and select Create VirtualEnv . Set the field Name: python35 Location: C:\\envs\\python35 Base interpreter: C:\\Python35\\Python.exe Run examples/test.py OpenCV Download OpenCV Python . Select the opencv_python\u20113.4.1+contrib\u2011cp35\u2011cp35m\u2011win_amd64.whl version. Note: The 3.4.1 may be different when new versions are released, don\u2019t focus on the version number. Open Command Prompt and run C:\\envs\\python35\\Scripts\\activate.bat CD to your downloads folder. Run pip install \u201copencv_python\u20113.4.1+contrib\u2011cp35\u2011cp35m\u2011win_amd64.whl\u201d or whatever version of OpenCV you downloaded above. Simulator Configuration Open examples/test.py In the main method of the file there is an initialization of simulator_config . You can change which json file is used here. Open the configuration you want to use in the configurations folder and you can change the server_ip (the ip address of the computer running the simulator), the server_port (the port for the simulator, should be 8998), and the client_ip (the ip address of the computer running the simulator). If both simulator and client are running on the same computer use localhost as the ip addresses (127.0.0.1). In this configuration you can also change the physical material properties for the specular exponent (10-100), specular reflection coefficient (0.0-1.0), diffuse reflection coefficient (0.0-1.0), dielectric constant (0.10-10,000+), and roughness (0.0-1.0). Vehicle Configuration Open examples/test.py In the main method of the file there is an initialization of vehicle_config . You can change which json file is used here. The different configurations reside in the configurations folder. To add sensors open a configuration and go to the sensors array. You can copy an existing sensor if it is in the configuration, or you can open cruise_demo_all.json to find a sensor you are wanting to add, then modify the parameters to fit your needs. To remove a sensor open a configuration and go to the sensors array. Then just delete that dictionary for the sensor you want to remove, ensuring that you didn\u2019t delete a comma between the dictionaries. Run Run examples/test.py","title":"Installation"},{"location":"Installation/#monodrive-client-installation","text":"","title":"monoDrive client installation"},{"location":"Installation/#linux","text":"Install monoDrive Simulator pip install virtualenv cd client virtualenv venv venv\\Scripts\\activate pip install -e . --upgrade python -c \"import monodrive; print('Success')\" python examples\\test.py","title":"Linux"},{"location":"Installation/#windows","text":"Install monoDrive Simulator Install Windows Desktop git clone https://github.com/monoDriveIO/client.git Python 3.5 is required for monoDrive Windows client Download Python 3.5 DOS Prompt (for Pycharm see below) Setup Python Path -Go to Control Panel\\System and Security\\System select Advanced system settings from the left panel from Advanced tab click on Environment Variables In the System variables section search for (create if doesn't exist) PYTHONPATH and set C:\\Python35\\;C:\\Python35\\Scripts; You need to restart CMD. Verify that worked which python result:[path to the python you installed above] pip install virtualenv cd client virtualenv venv venv\\Scripts\\activate pip install -e . --upgrade python -c \"import monodrive; print('Success')\" python examples\\test.py Pycharm (optional) Download PyCharm Community Edition and Install. Clone PythonClient . Open the root directory of the repo in PyCharm. Go to File then Settings . Expand the Project: PythonClient and select Project Interpreter . Click the gear icon in the upper right and select Create VirtualEnv . Set the field Name: python35 Location: C:\\envs\\python35 Base interpreter: C:\\Python35\\Python.exe Run examples/test.py OpenCV Download OpenCV Python . Select the opencv_python\u20113.4.1+contrib\u2011cp35\u2011cp35m\u2011win_amd64.whl version. Note: The 3.4.1 may be different when new versions are released, don\u2019t focus on the version number. Open Command Prompt and run C:\\envs\\python35\\Scripts\\activate.bat CD to your downloads folder. Run pip install \u201copencv_python\u20113.4.1+contrib\u2011cp35\u2011cp35m\u2011win_amd64.whl\u201d or whatever version of OpenCV you downloaded above.","title":"Windows"},{"location":"Installation/#simulator-configuration","text":"Open examples/test.py In the main method of the file there is an initialization of simulator_config . You can change which json file is used here. Open the configuration you want to use in the configurations folder and you can change the server_ip (the ip address of the computer running the simulator), the server_port (the port for the simulator, should be 8998), and the client_ip (the ip address of the computer running the simulator). If both simulator and client are running on the same computer use localhost as the ip addresses (127.0.0.1). In this configuration you can also change the physical material properties for the specular exponent (10-100), specular reflection coefficient (0.0-1.0), diffuse reflection coefficient (0.0-1.0), dielectric constant (0.10-10,000+), and roughness (0.0-1.0).","title":"Simulator Configuration"},{"location":"Installation/#vehicle-configuration","text":"Open examples/test.py In the main method of the file there is an initialization of vehicle_config . You can change which json file is used here. The different configurations reside in the configurations folder. To add sensors open a configuration and go to the sensors array. You can copy an existing sensor if it is in the configuration, or you can open cruise_demo_all.json to find a sensor you are wanting to add, then modify the parameters to fit your needs. To remove a sensor open a configuration and go to the sensors array. Then just delete that dictionary for the sensor you want to remove, ensuring that you didn\u2019t delete a comma between the dictionaries.","title":"Vehicle Configuration"},{"location":"Installation/#run","text":"Run examples/test.py","title":"Run"},{"location":"Lidar/","text":"Lidar Sensor The configuration for a LiDAR sensor that is modeled after the Velodyne LiDAR line. To view the lidar data download VeloView . Run VeloView, click Sensor Stream , and select the correct configuration (16, 32, or 64). Then run the simulator and client normally when the stream data starts coming through VeloView will populate with the lidar data. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"max_distance\": float, \"vertical_fov_angle\": float, \"horizontal_resolution\": float, \"fps\": float, \"n_lasers\": float (16, 32, or 64) } max_distance : The max distance, in centimeters, the LiDAR laser will travel. vertical_fov_angle : The vertical field of view angle, in degrees, for the LiDAR. horizontal_resolution : The horizontal angle, in degrees, the LiDAR must rotate before shooting out the next set of lasers. n_lasers : The number of lasers the LiDAR sensor shoots out per sweep. This can be set to 16 (VLP-16), 32 (HDL-32), or 64 (HDL-64). Raw Output Data Format VLP-16 Manual Download HDL-32E Manual Download HDL-64E Manual Download","title":"Lidar"},{"location":"Lidar/#lidar-sensor","text":"The configuration for a LiDAR sensor that is modeled after the Velodyne LiDAR line. To view the lidar data download VeloView . Run VeloView, click Sensor Stream , and select the correct configuration (16, 32, or 64). Then run the simulator and client normally when the stream data starts coming through VeloView will populate with the lidar data. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"max_distance\": float, \"vertical_fov_angle\": float, \"horizontal_resolution\": float, \"fps\": float, \"n_lasers\": float (16, 32, or 64) } max_distance : The max distance, in centimeters, the LiDAR laser will travel. vertical_fov_angle : The vertical field of view angle, in degrees, for the LiDAR. horizontal_resolution : The horizontal angle, in degrees, the LiDAR must rotate before shooting out the next set of lasers. n_lasers : The number of lasers the LiDAR sensor shoots out per sweep. This can be set to 16 (VLP-16), 32 (HDL-32), or 64 (HDL-64).","title":"Lidar Sensor"},{"location":"Lidar/#raw-output-data-format","text":"VLP-16 Manual Download HDL-32E Manual Download HDL-64E Manual Download","title":"Raw Output Data Format"},{"location":"Multi-Camera/","text":"Multi-Camera Sensor The configuration for a multi camera sensor that streams all of the cameras in the camera_ids array through a single UDP port into one rendered image. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"fps\": int, \"display_process\": bool, \"sensor_process\": bool, \"hdmi_streaming\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"stream_dimensions\": { \"x\": float, \"y\": float }, \"camera_ids\": [ strings ] } hdmi_streaming : A boolean representing whether the camera data gets streamed the HDMI, or the default of TCP. stream_dimensions : The dimensions of which the stream will stream over TCP. x : The x dimension. y : The y dimension. camera_ids : An array of strings that representing the ids of the cameras that are to be streamed through the multi camera. Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_camera= camera.get_message() Parsed Camera Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. image (List >>): A 3D list that represents a single image following the format of stream_dimensions_x x stream_dimensions_y x 4","title":"Multi Camera"},{"location":"Multi-Camera/#multi-camera-sensor","text":"The configuration for a multi camera sensor that streams all of the cameras in the camera_ids array through a single UDP port into one rendered image. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"fps\": int, \"display_process\": bool, \"sensor_process\": bool, \"hdmi_streaming\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"stream_dimensions\": { \"x\": float, \"y\": float }, \"camera_ids\": [ strings ] } hdmi_streaming : A boolean representing whether the camera data gets streamed the HDMI, or the default of TCP. stream_dimensions : The dimensions of which the stream will stream over TCP. x : The x dimension. y : The y dimension. camera_ids : An array of strings that representing the ids of the cameras that are to be streamed through the multi camera.","title":"Multi-Camera Sensor"},{"location":"Multi-Camera/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_camera= camera.get_message()","title":"Output Data"},{"location":"Multi-Camera/#parsed-camera-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. image (List >>): A 3D list that represents a single image following the format of stream_dimensions_x x stream_dimensions_y x 4","title":"Parsed Camera Data Dictionary Keys and Values."},{"location":"RPM/","text":"RPM Sensor The configuration for an RPM sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float, \"wheel_number\": int } Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_rpm = rpm.get_message() Parsed RPM Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. wheel_number(int): Wheel number the sensor is attached to. wheel_rpm(float): Rotations per minute. Raw Output Data Format Parsed in RPM.digest_frame() Bytes 0-4: The wheel number for the RPM sensor. Bytes 4-8: The wheel speed in RPM for the specific RPM sensor.","title":"RPM"},{"location":"RPM/#rpm-sensor","text":"The configuration for an RPM sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float, \"wheel_number\": int }","title":"RPM Sensor"},{"location":"RPM/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_rpm = rpm.get_message()","title":"Output Data"},{"location":"RPM/#parsed-rpm-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. wheel_number(int): Wheel number the sensor is attached to. wheel_rpm(float): Rotations per minute.","title":"Parsed RPM Data Dictionary Keys and Values."},{"location":"RPM/#raw-output-data-format-parsed-in-rpmdigest_frame","text":"Bytes 0-4: The wheel number for the RPM sensor. Bytes 4-8: The wheel speed in RPM for the specific RPM sensor.","title":"Raw Output Data Format Parsed in RPM.digest_frame()"},{"location":"Radar/","text":"Radar Sensor The configuration for a radar sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"num_samples_per_sweep\": int, \"fs\": int, \"fc\": float, \"num_sweeps\": int, \"range_max\": float, \"sweep_num_for_range_max\": float, \"range_resolution\": float, \"max_velocity\": float, \"fps\": int, \"transmitter\": { \"aperture\": float, \"gain\": float }, \"receiver\": { \"aperture\": float, \"nf\": float, \"noise_temp\": float, \"nb\": float, \"gain\": float, \"kb\": float } } num_samples_per_sweep : fs : fc : num_sweeps : range_max : sweep_num_for_range_max : range_resolution : max_velocity : transmitter : aperture : gain : receiver : aperture : nf : noise_temp : nb : gain : kb : Output Data # See [base sensor](Base-Sensor.md) for examples on how to get the sensor. data_radar = radar.get_message() # The data in data_radar is a dictionary. game_time = data_radar['game_time'] data = data_radar['data'] Raw Output Data Format 0...NumberOfSweeps as i: Bytes 8i-4+8i: Real bits represented as a float in single precision IEEE-754 format. Bytes 4+8i-8+8i: Imaginary bits represented as a float in single precision IEEE-754 format.","title":"Radar"},{"location":"Radar/#radar-sensor","text":"The configuration for a radar sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"num_samples_per_sweep\": int, \"fs\": int, \"fc\": float, \"num_sweeps\": int, \"range_max\": float, \"sweep_num_for_range_max\": float, \"range_resolution\": float, \"max_velocity\": float, \"fps\": int, \"transmitter\": { \"aperture\": float, \"gain\": float }, \"receiver\": { \"aperture\": float, \"nf\": float, \"noise_temp\": float, \"nb\": float, \"gain\": float, \"kb\": float } } num_samples_per_sweep : fs : fc : num_sweeps : range_max : sweep_num_for_range_max : range_resolution : max_velocity : transmitter : aperture : gain : receiver : aperture : nf : noise_temp : nb : gain : kb :","title":"Radar Sensor"},{"location":"Radar/#output-data","text":"# See [base sensor](Base-Sensor.md) for examples on how to get the sensor. data_radar = radar.get_message() # The data in data_radar is a dictionary. game_time = data_radar['game_time'] data = data_radar['data']","title":"Output Data"},{"location":"Radar/#raw-output-data-format","text":"0...NumberOfSweeps as i: Bytes 8i-4+8i: Real bits represented as a float in single precision IEEE-754 format. Bytes 4+8i-8+8i: Imaginary bits represented as a float in single precision IEEE-754 format.","title":"Raw Output Data Format"},{"location":"Simulator-Configuration/","text":"Example JSON { \"id\": \"simulator_test\", \"server_ip\": \"127.0.0.1\", \"server_port\": 8998, \"client_ip\": \"127.0.0.1\", \"phys_materials\": { \"Aluminum\": { \"specular_exponent\": 92.0, \"specular_coefficient\": 0.95, \"diffuse_coefficient\": 0.06, \"dielectric_constant\": 10.0, \"roughness\": 0.15 }, \"Asphalt\": { \"specular_exponent\": 10.0, \"specular_coefficient\": 0.10, \"diffuse_coefficient\": 0.95, \"dielectric_constant\": 7.0, \"roughness\": 0.48 } } } Open examples/test.py In the main method of the file there is an initialization of simulator_config . You can change which json file is used here. Open the configuration you want to use in the configurations folder and you can change the server_ip (the ip address of the computer running the simulator), the server_port (the port for the simulator, should be 8998), and the client_ip (the ip address of the computer running the simulator). If both simulator and client are running on the same computer use localhost as the ip addresses (127.0.0.1). In this configuration you can also change the physical material properties for the specular exponent (10-100), specular reflection coefficient (0.0-1.0), diffuse reflection coefficient (0.0-1.0), dielectric constant (0.10-10,000+), and roughness (0.0-1.0).","title":"Simulator"},{"location":"Simulator-Configuration/#example-json","text":"{ \"id\": \"simulator_test\", \"server_ip\": \"127.0.0.1\", \"server_port\": 8998, \"client_ip\": \"127.0.0.1\", \"phys_materials\": { \"Aluminum\": { \"specular_exponent\": 92.0, \"specular_coefficient\": 0.95, \"diffuse_coefficient\": 0.06, \"dielectric_constant\": 10.0, \"roughness\": 0.15 }, \"Asphalt\": { \"specular_exponent\": 10.0, \"specular_coefficient\": 0.10, \"diffuse_coefficient\": 0.95, \"dielectric_constant\": 7.0, \"roughness\": 0.48 } } } Open examples/test.py In the main method of the file there is an initialization of simulator_config . You can change which json file is used here. Open the configuration you want to use in the configurations folder and you can change the server_ip (the ip address of the computer running the simulator), the server_port (the port for the simulator, should be 8998), and the client_ip (the ip address of the computer running the simulator). If both simulator and client are running on the same computer use localhost as the ip addresses (127.0.0.1). In this configuration you can also change the physical material properties for the specular exponent (10-100), specular reflection coefficient (0.0-1.0), diffuse reflection coefficient (0.0-1.0), dielectric constant (0.10-10,000+), and roughness (0.0-1.0).","title":"Example JSON"},{"location":"Starting-Simulator/","text":"Client Control Flow with Simulator Control: Create an instance of the Simulator class with the desired configuration and send the configuration to the simulator: simulator = Simulator(SimulatorConfiguration('simulator.json')) simulator.send_configuration() Get an instance of a vehicle of the desired type ( TeleportVehicle is driven by the user, SimpleVehicle uses the Waypoint and GPS sensors to drive on it's own) and cofiguration: from monodrive.vehicles import TeleportVehicle ... vehicle_config = VehicleConfiguration('demo.json') ego_vehicle = simulator.get_ego_vehicle(vehicle_config, TeleportVehicle) or from monodrive.vehicles import SimpleVehicle ... vehicle_config = VehicleConfiguration('demo.json') ego_vehicle = simulator.get_ego_vehicle(vehicle_config, SimpleVehicle) Note: the simulator currently supports only one ego vehicle instance per simulation session Send the vehicle configuration and start the vehicle process: simulator.send_vehicle_configuration(vehicle_config) ego_vehicle.start() Simulator: Each sensor will sample it's data and send it to the client. Sensor: Each sensor in the client will digest this data from the simulator and put the parsed data into both q_display and q_data . q_display is used for displaying the sensor's data in a graph, q_data is used in the Vehicle class to assist the Ego vehicle in driving. for sensor in ego_vehicle.sensors: data = sensor.get_message() # do something interesting with the data Vehicle: The SimpleVehicle class implements drive(sensors) to use the sensors' data to calculate control values for the Ego vehicle. These control values are sent to the simulator to control the vehicle. The JSON format the simulator expects to control the ego vehicle. { \"forward_amount\": float, \"right_amount\": float } forward_amount : Value from -1.0 to 1.0, negative being reverse right_amount : Value from -1.0 to 1.0, negative being left","title":"Starting the Simulator"},{"location":"Starting-Simulator/#client-control-flow-with-simulator","text":"Control: Create an instance of the Simulator class with the desired configuration and send the configuration to the simulator: simulator = Simulator(SimulatorConfiguration('simulator.json')) simulator.send_configuration() Get an instance of a vehicle of the desired type ( TeleportVehicle is driven by the user, SimpleVehicle uses the Waypoint and GPS sensors to drive on it's own) and cofiguration: from monodrive.vehicles import TeleportVehicle ... vehicle_config = VehicleConfiguration('demo.json') ego_vehicle = simulator.get_ego_vehicle(vehicle_config, TeleportVehicle) or from monodrive.vehicles import SimpleVehicle ... vehicle_config = VehicleConfiguration('demo.json') ego_vehicle = simulator.get_ego_vehicle(vehicle_config, SimpleVehicle) Note: the simulator currently supports only one ego vehicle instance per simulation session Send the vehicle configuration and start the vehicle process: simulator.send_vehicle_configuration(vehicle_config) ego_vehicle.start() Simulator: Each sensor will sample it's data and send it to the client. Sensor: Each sensor in the client will digest this data from the simulator and put the parsed data into both q_display and q_data . q_display is used for displaying the sensor's data in a graph, q_data is used in the Vehicle class to assist the Ego vehicle in driving. for sensor in ego_vehicle.sensors: data = sensor.get_message() # do something interesting with the data Vehicle: The SimpleVehicle class implements drive(sensors) to use the sensors' data to calculate control values for the Ego vehicle. These control values are sent to the simulator to control the vehicle. The JSON format the simulator expects to control the ego vehicle. { \"forward_amount\": float, \"right_amount\": float } forward_amount : Value from -1.0 to 1.0, negative being reverse right_amount : Value from -1.0 to 1.0, negative being left","title":"Client Control Flow with Simulator"},{"location":"Vehicle-Configuration/","text":"Example JSON { \"id\": \"laptop_test\", \"server_ip\": \"127.0.0.1\", \"server_port\": 8998, \"client_ip\": \"127.0.0.1\", \"lane_number\": 0, \"position\": 22000, \"spawning_rotation\": { \"pitch\":0.0, \"yaw\":-90.0, \"roll\":0.0 }, \"mesh_path\": \"/Game/Vehicles_Vol1/Models/SUV/SUV_rigged.SUV_rigged\", \"anim_path\": \"/Game/Vehicles_Vol1/Blueprints/SUV_AnimBP.SUV_AnimBP_C\", \"wheels\":[ { \"id\": \"FL_Wheel\", \"wheel_number\": 0, \"offset\": { \"x\":0.0, \"y\":-12.0, \"z\":0.0 }, \"front\": true }, { \"id\": \"FR_Wheel\", \"wheel_number\": 1, \"offset\": { \"x\":0.0, \"y\":12.0, \"z\":0.0 }, \"front\": true }, { \"id\": \"BL_Wheel\", \"wheel_number\": 2, \"offset\": { \"x\":0.0, \"y\":-12.0, \"z\":0.0 }, \"front\": false }, { \"id\": \"BR_Wheel\", \"wheel_number\": 3, \"offset\": { \"x\":0.0, \"y\":12.0, \"z\":0.0 }, \"front\": false } ], \"sensors\": [ { \"type\": \"Lidar\", \"id\": \"far_left\", \"packet_size\": 1472, \"listen_port\": 8088, \"display_process\": false, \"sensor_process\": true, \"location\": { \"x\":-75.0, \"y\":-25.0, \"z\":350.0 }, \"rotation\": { \"pitch\":0.0, \"yaw\":0.0, \"roll\":0.0 }, \"max_distance\": 8000.0, \"vertical_fov_angle\": 30.0, \"horizontal_resolution\": 0.4, \"fps\": 10.0, \"n_lasers\": 32, \"reset_angle\": 0.0 } ] } Open examples/test.py In the main method of the file there is an initialization of vehicle_config . You can change which json file is used here. The different configurations reside in the configurations folder. To add sensors open a configuration and go to the sensors array. You can copy an existing sensor if it is in the configuration, or you can open one of the other configurations to find a sensor you are wanting to add, then modify the parameters to fit your needs. To remove a sensor open a configuration and go to the sensors array. Then just delete that dictionary for the sensor you want to remove.","title":"Vehicle"},{"location":"Vehicle-Configuration/#example-json","text":"{ \"id\": \"laptop_test\", \"server_ip\": \"127.0.0.1\", \"server_port\": 8998, \"client_ip\": \"127.0.0.1\", \"lane_number\": 0, \"position\": 22000, \"spawning_rotation\": { \"pitch\":0.0, \"yaw\":-90.0, \"roll\":0.0 }, \"mesh_path\": \"/Game/Vehicles_Vol1/Models/SUV/SUV_rigged.SUV_rigged\", \"anim_path\": \"/Game/Vehicles_Vol1/Blueprints/SUV_AnimBP.SUV_AnimBP_C\", \"wheels\":[ { \"id\": \"FL_Wheel\", \"wheel_number\": 0, \"offset\": { \"x\":0.0, \"y\":-12.0, \"z\":0.0 }, \"front\": true }, { \"id\": \"FR_Wheel\", \"wheel_number\": 1, \"offset\": { \"x\":0.0, \"y\":12.0, \"z\":0.0 }, \"front\": true }, { \"id\": \"BL_Wheel\", \"wheel_number\": 2, \"offset\": { \"x\":0.0, \"y\":-12.0, \"z\":0.0 }, \"front\": false }, { \"id\": \"BR_Wheel\", \"wheel_number\": 3, \"offset\": { \"x\":0.0, \"y\":12.0, \"z\":0.0 }, \"front\": false } ], \"sensors\": [ { \"type\": \"Lidar\", \"id\": \"far_left\", \"packet_size\": 1472, \"listen_port\": 8088, \"display_process\": false, \"sensor_process\": true, \"location\": { \"x\":-75.0, \"y\":-25.0, \"z\":350.0 }, \"rotation\": { \"pitch\":0.0, \"yaw\":0.0, \"roll\":0.0 }, \"max_distance\": 8000.0, \"vertical_fov_angle\": 30.0, \"horizontal_resolution\": 0.4, \"fps\": 10.0, \"n_lasers\": 32, \"reset_angle\": 0.0 } ] } Open examples/test.py In the main method of the file there is an initialization of vehicle_config . You can change which json file is used here. The different configurations reside in the configurations folder. To add sensors open a configuration and go to the sensors array. You can copy an existing sensor if it is in the configuration, or you can open one of the other configurations to find a sensor you are wanting to add, then modify the parameters to fit your needs. To remove a sensor open a configuration and go to the sensors array. Then just delete that dictionary for the sensor you want to remove.","title":"Example JSON"},{"location":"Waypoint/","text":"Waypoint Sensor The configuration for a waypoint sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float, \"point_delta\": float, \"total_points\": int } point_delta : Distance, in centimeters, between waypoints. total_points : Total number of waypoints per lane Output Data See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_waypoint = waypoint.get_message() Parsed Waypoint Data Dictionary Keys and Values. time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. points_by_lane (List >>): A list of (x, Y) coordinates for each lane that are on the current road. current_lane (int): Current lane of of ego vehicle, index to get current lane coordinates from point_by_lane . forward_vector (List >): Forward vector of the Ego vehicle. speed (float): Speed in meters per second of the Ego vehicle. world_location (List >): World location of the Ego vehicle. rot_z (float): Z/Yaw rotation of the Ego vehicle. Raw Output Data Format Parsed in Waypoint.digest_frame() Byte 0-4: World location x coordinate bits represented as a float in single precision IEEE-754 format. Bytes 4-8: World location y coordinate bits represented as a float in single precision IEEE-754 format. Bytes 8-12: Forward vector x component bits represented as a float in single precision IEEE-754 format. Byte 12-16: Forward vector y component bits represented as a float in single precision IEEE-754 format. Bytes 16-20: Forward vector z component bits represented as a float in single precision IEEE-754 format. Bytes 20-24: Speed bits represented as a float in single precision IEEE-754 format. Bytes 24-28: Rotation yaw bits represented as a float in single precision IEEE-754 format. Bytes 28-32: Lane number. Bytes 32-36: Total number of lanes. 0...NumberOfLanes as i: Bytes 36+8i-40+8i: Latitude bits represented as a float in single precision IEEE-754 format. Bytes 40+8i-44+8i: Longitude bits represented as a float in single precision IEEE-754 format.","title":"Waypoint"},{"location":"Waypoint/#waypoint-sensor","text":"The configuration for a waypoint sensor. { \"type\": string, \"id\": string, \"packet_size\": int, \"listen_port\": int, \"display_process\": bool, \"sensor_process\": bool, \"location\": { \"x\": float, \"y\": float, \"z\": float }, \"rotation\": { \"pitch\": float, \"yaw\": float, \"roll\": float }, \"fps\": float, \"point_delta\": float, \"total_points\": int } point_delta : Distance, in centimeters, between waypoints. total_points : Total number of waypoints per lane","title":"Waypoint Sensor"},{"location":"Waypoint/#output-data","text":"See base sensor for examples on how to get the sensor. All data that comes from sensor queues is a dictionary. data_waypoint = waypoint.get_message()","title":"Output Data"},{"location":"Waypoint/#parsed-waypoint-data-dictionary-keys-and-values","text":"time_stamp (int): Timestamp representing milliseconds since Sunday. game_time (float): Current game time of simulator, this value will be more prominent. points_by_lane (List >>): A list of (x, Y) coordinates for each lane that are on the current road. current_lane (int): Current lane of of ego vehicle, index to get current lane coordinates from point_by_lane . forward_vector (List >): Forward vector of the Ego vehicle. speed (float): Speed in meters per second of the Ego vehicle. world_location (List >): World location of the Ego vehicle. rot_z (float): Z/Yaw rotation of the Ego vehicle.","title":"Parsed Waypoint Data Dictionary Keys and Values."},{"location":"Waypoint/#raw-output-data-format-parsed-in-waypointdigest_frame","text":"Byte 0-4: World location x coordinate bits represented as a float in single precision IEEE-754 format. Bytes 4-8: World location y coordinate bits represented as a float in single precision IEEE-754 format. Bytes 8-12: Forward vector x component bits represented as a float in single precision IEEE-754 format. Byte 12-16: Forward vector y component bits represented as a float in single precision IEEE-754 format. Bytes 16-20: Forward vector z component bits represented as a float in single precision IEEE-754 format. Bytes 20-24: Speed bits represented as a float in single precision IEEE-754 format. Bytes 24-28: Rotation yaw bits represented as a float in single precision IEEE-754 format. Bytes 28-32: Lane number. Bytes 32-36: Total number of lanes. 0...NumberOfLanes as i: Bytes 36+8i-40+8i: Latitude bits represented as a float in single precision IEEE-754 format. Bytes 40+8i-44+8i: Longitude bits represented as a float in single precision IEEE-754 format.","title":"Raw Output Data Format Parsed in Waypoint.digest_frame()"},{"location":"_Sidebar/","text":"Home Installation Configuration Simulator Vehicle Sensors Radar Lidar Multi Camera Camera GPS IMU Waypoint Bounding Box RPM Starting Simulator","title":" Sidebar"},{"location":"LV_client/monoDrive_Simulator_Interface_Example/","text":"monoDrive Simulator Interface Example.vi Inputs Control Port (int): Port to write and read messages from the simualor, typically 8999 . Simulator IP (string): IP of the simulator, typically 127.0.0.1 . Simulator Config (Path): Path or name of the file with the Simulator configuration in JSON format. Sensor Config (Path): Path or name of the file with the Sensor configuration in JSON format. Trajectory Config (Path): Path or name of the file with the Trajectory configuration in JSON format. Simulator Error In (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Step (boolean): Indicate if the simulator is runnig on replay or replay_step mode. Driving (boolean): Indicate if the simulator is runnig on closed_loop mode.","title":"monoDrive Simulator Interface Example"},{"location":"LV_client/monoDrive_Simulator_Interface_Example/#monodrive-simulator-interface-examplevi","text":"","title":"monoDrive Simulator Interface Example.vi"},{"location":"LV_client/monoDrive_Simulator_Interface_Example/#inputs","text":"Control Port (int): Port to write and read messages from the simualor, typically 8999 . Simulator IP (string): IP of the simulator, typically 127.0.0.1 . Simulator Config (Path): Path or name of the file with the Simulator configuration in JSON format. Sensor Config (Path): Path or name of the file with the Sensor configuration in JSON format. Trajectory Config (Path): Path or name of the file with the Trajectory configuration in JSON format. Simulator Error In (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/monoDrive_Simulator_Interface_Example/#outputs","text":"Step (boolean): Indicate if the simulator is runnig on replay or replay_step mode. Driving (boolean): Indicate if the simulator is runnig on closed_loop mode.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__camera__singlec/","text":"mono__camera__single.vi Description Reads the stream data for a camera sensor and returns a picture with the format specified in the stream dimensions. Inputs connection ID (TCP Network connection): connection ID corresponding to the TCP connection for camera sensor. stream dimensions (Cluster): Specify the dimension of the image obtain with a specific camera. Cluster with two elements \"x dimension\" (I32) and \"y dimension\" (I32) . error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for camera sensor, same as input connection ID. camera_out (picture): Procesed image, ready for display . error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  camera  singlec"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__camera__singlec/#mono__camera__singlevi","text":"","title":"mono__camera__single.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__camera__singlec/#description","text":"Reads the stream data for a camera sensor and returns a picture with the format specified in the stream dimensions.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__camera__singlec/#inputs","text":"connection ID (TCP Network connection): connection ID corresponding to the TCP connection for camera sensor. stream dimensions (Cluster): Specify the dimension of the image obtain with a specific camera. Cluster with two elements \"x dimension\" (I32) and \"y dimension\" (I32) . error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__camera__singlec/#outputs","text":"Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for camera sensor, same as input connection ID. camera_out (picture): Procesed image, ready for display . error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__gpsc/","text":"mono_gps.vi Description Reads the data stream data for the GPS sensor and outpust a cluster with the formatted data. Inputs Array_GPS (1D Array of Clusters) : Collection of GPS sensor configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this GPS sensor. port (int): System port corresponding to this GPS sensor. Index: Index of the elemenet in the Array_GPS you are interested. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for GPS sensor, same as input connection ID. gps sample: Cluster with the processed data for the GPS sensor. Type Name U8 preamble U16 MSG_POS_LLH U16 sensor_id U8 payload_length DBL latitude DBL longitude DBL elevation SGL WorldLocation_x SGL WorldLocation_y SGL forward_x SGL forward_y SGL forward_z SGL ego_yaw SGL ego_speed U16 horizontal_acceleration U16 vertical_acceleration U8 satellites U8 mode U16 CRC error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  gpsc"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__gpsc/#mono_gpsvi","text":"","title":"mono_gps.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__gpsc/#description","text":"Reads the data stream data for the GPS sensor and outpust a cluster with the formatted data.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__gpsc/#inputs","text":"Array_GPS (1D Array of Clusters) : Collection of GPS sensor configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this GPS sensor. port (int): System port corresponding to this GPS sensor. Index: Index of the elemenet in the Array_GPS you are interested. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__gpsc/#outputs","text":"Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for GPS sensor, same as input connection ID. gps sample: Cluster with the processed data for the GPS sensor. Type Name U8 preamble U16 MSG_POS_LLH U16 sensor_id U8 payload_length DBL latitude DBL longitude DBL elevation SGL WorldLocation_x SGL WorldLocation_y SGL forward_x SGL forward_y SGL forward_z SGL ego_yaw SGL ego_speed U16 horizontal_acceleration U16 vertical_acceleration U8 satellites U8 mode U16 CRC error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__imuc/","text":"mono_imu.vi Description Reads the data stream for the IMU sensor and outputs the IMU sample. Inputs Array_IMU (1D Array of Clusters) : Collection of IMU sensor configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this IMU sensor. port (int): System port corresponding to this IMU sensor. Index: Index of the elemenet in the Array_IMU you are interested. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for IMU sensor, same as input connection ID. imu_sample: Cluster with the processed data for the IMU sensor. Type Name U8 packetSize SGL accel_x SGL accel_x SGL accel_z SGL angle_rate_x SGL angle_rate_y SGL angle_rate_z U32 timer U16 checksum I32 timeWeek error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  imuc"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__imuc/#mono_imuvi","text":"","title":"mono_imu.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__imuc/#description","text":"Reads the data stream for the IMU sensor and outputs the IMU sample.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__imuc/#inputs","text":"Array_IMU (1D Array of Clusters) : Collection of IMU sensor configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this IMU sensor. port (int): System port corresponding to this IMU sensor. Index: Index of the elemenet in the Array_IMU you are interested. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__imuc/#outputs","text":"Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for IMU sensor, same as input connection ID. imu_sample: Cluster with the processed data for the IMU sensor. Type Name U8 packetSize SGL accel_x SGL accel_x SGL accel_z SGL angle_rate_x SGL angle_rate_y SGL angle_rate_z U32 timer U16 checksum I32 timeWeek error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__lidarc/","text":"mono_lidar.vi Description Gets data from Lidar parse it and forward it to port 2368 (VeloView) Inputs Array_Lidar (1D Array of Clusters) : Collection of Lidar sensors configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Lidar sensor. port (int): System port corresponding to this Lidar sensor. Index (Int): Index of the elemenet in the Array_Lidar you are interested. UDP port (UDP Network Connection): UDP connection to the port where VeloView is listening, typically 2368. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs lidar raw data (String) Output connection ID corresponding to the TCP connection for Lidar sensor, same as input connection ID. lidar_data (Cluster): Cluster with the processed data for the Lidar sensor. Type Name U32 lenght U32 time_stamp SGL game_time error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  lidarc"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__lidarc/#mono_lidarvi","text":"","title":"mono_lidar.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__lidarc/#description","text":"Gets data from Lidar parse it and forward it to port 2368 (VeloView)","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__lidarc/#inputs","text":"Array_Lidar (1D Array of Clusters) : Collection of Lidar sensors configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Lidar sensor. port (int): System port corresponding to this Lidar sensor. Index (Int): Index of the elemenet in the Array_Lidar you are interested. UDP port (UDP Network Connection): UDP connection to the port where VeloView is listening, typically 2368. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__lidarc/#outputs","text":"lidar raw data (String) Output connection ID corresponding to the TCP connection for Lidar sensor, same as input connection ID. lidar_data (Cluster): Cluster with the processed data for the Lidar sensor. Type Name U32 lenght U32 time_stamp SGL game_time error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__proccess__camerac/","text":"mono_process_camera.vi Description Process the camera stream data and assign each image data to an individual picture. Inputs Array_Camera (1D Array of Clusters) : Collection of Camera sensors configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Camera sensor. port (int): System port corresponding to this Camera sensor. Camera dimensions (1D Array of Clusters): Array of clusters with the dimensions for each camera. Cluster with two elements: \"x dimension\" (I32) \"y dimension\" (I32). error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs camera array (Cluster): Cluster of pictures, corresponding to each camera. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  proccess  camerac"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__proccess__camerac/#mono_process_cameravi","text":"","title":"mono_process_camera.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__proccess__camerac/#description","text":"Process the camera stream data and assign each image data to an individual picture.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__proccess__camerac/#inputs","text":"Array_Camera (1D Array of Clusters) : Collection of Camera sensors configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Camera sensor. port (int): System port corresponding to this Camera sensor. Camera dimensions (1D Array of Clusters): Array of clusters with the dimensions for each camera. Cluster with two elements: \"x dimension\" (I32) \"y dimension\" (I32). error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__proccess__camerac/#outputs","text":"camera array (Cluster): Cluster of pictures, corresponding to each camera. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__radarc/","text":"mono_radar.vi Description Reads the stream data for the Radar sensor and outputs a 3D array with the formatted data. Inputs Array_Radar (1D Array of Clusters) : Collection of Radar sensor configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Radar sensor. port (int): System port corresponding to this Radar sensor. Index: Index of the elemenet in the Array_Radar you are interested. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for Radar sensor, same as input connection ID. radar_output(Cluster): Cluster with the processed data for the Radar sensor. Type Name I32 time_stamp I32 game_time 1D Array SGL ranges 1D Array SGL aoa_list 1D Array SGL velocities radar data cube (String): Raw data. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  radarc"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__radarc/#mono_radarvi","text":"","title":"mono_radar.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__radarc/#description","text":"Reads the stream data for the Radar sensor and outputs a 3D array with the formatted data.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__radarc/#inputs","text":"Array_Radar (1D Array of Clusters) : Collection of Radar sensor configured. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Radar sensor. port (int): System port corresponding to this Radar sensor. Index: Index of the elemenet in the Array_Radar you are interested. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__radarc/#outputs","text":"Connection ID Out (TCP Network connection): Output connection ID corresponding to the TCP connection for Radar sensor, same as input connection ID. radar_output(Cluster): Cluster with the processed data for the Radar sensor. Type Name I32 time_stamp I32 game_time 1D Array SGL ranges 1D Array SGL aoa_list 1D Array SGL velocities radar data cube (String): Raw data. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__send__sensors__configc/","text":"mono_send_sensors_config .vi Description Send TCP messages to the server to configure sensors as cameras, lidars, radar, etc by proving a path to a JSON file with the sensor configuration. Inputs TCP Connection in (TCP Network connection) : TCP connection to the server . Sensor Config (Path): Path or name of the file with the Sensor configuration in JSON format. Command_ID (String) : A valid command to the server. Typically REPLAY_ConfigureSensorsCommand_ID Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs config response (String): Response from the server. TCP Connection Out (TCP Network connection): TCP connection to the server. success (Boolean): True if configuration was succesful, False otherwise . ports (Array of int): Array with all the number ports for sensors specified in the Sensor config file. Sensors(Array of String): Array with the type name of all the sensors specified in the Sensor config file. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  send  sensors  configc"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__send__sensors__configc/#mono_send_sensors_config-vi","text":"","title":"mono_send_sensors_config .vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__send__sensors__configc/#description","text":"Send TCP messages to the server to configure sensors as cameras, lidars, radar, etc by proving a path to a JSON file with the sensor configuration.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__send__sensors__configc/#inputs","text":"TCP Connection in (TCP Network connection) : TCP connection to the server . Sensor Config (Path): Path or name of the file with the Sensor configuration in JSON format. Command_ID (String) : A valid command to the server. Typically REPLAY_ConfigureSensorsCommand_ID Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__send__sensors__configc/#outputs","text":"config response (String): Response from the server. TCP Connection Out (TCP Network connection): TCP connection to the server. success (Boolean): True if configuration was succesful, False otherwise . ports (Array of int): Array with all the number ports for sensors specified in the Sensor config file. Sensors(Array of String): Array with the type name of all the sensors specified in the Sensor config file. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__sensors__open__portsc/","text":"mono_sensors_open_ports.vi Description Open the ports for all the sensors configured, by getting each port in an array of ports. Returns an array with the connection ID corresponding to each port opened. Inputs Simulator IP(String): IP of the simulator, typically 127.0.0.1 . Ports(Array of int): Array with all the ports numbers for sensors specified in the Sensor config file. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Connections(Array of TCP Network connection): Array with all the TCP connections opened for sensors specified in the Sensor config file. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  sensors  open  portsc"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__sensors__open__portsc/#mono_sensors_open_portsvi","text":"","title":"mono_sensors_open_ports.vi"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__sensors__open__portsc/#description","text":"Open the ports for all the sensors configured, by getting each port in an array of ports. Returns an array with the connection ID corresponding to each port opened.","title":"Description"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__sensors__open__portsc/#inputs","text":"Simulator IP(String): IP of the simulator, typically 127.0.0.1 . Ports(Array of int): Array with all the ports numbers for sensors specified in the Sensor config file. error in (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/sensors/monoDrive_lvlib_mono__sensors__open__portsc/#outputs","text":"Connections(Array of TCP Network connection): Array with all the TCP connections opened for sensors specified in the Sensor config file. error out (Error Cluster): can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__check__config__modec/","text":"mono_check_config_mode.vi Description Replaces the running mode from the configuration text with the running mode chosen by the user. Inputs config_text (String) : Text obtain by reading the Simulator configuration file . Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs config_text_out (String) : Text with the simulator mode setting replaced with the Running mode . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  check  config  modec"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__check__config__modec/#mono_check_config_modevi","text":"","title":"mono_check_config_mode.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__check__config__modec/#description","text":"Replaces the running mode from the configuration text with the running mode chosen by the user.","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__check__config__modec/#inputs","text":"config_text (String) : Text obtain by reading the Simulator configuration file . Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__check__config__modec/#outputs","text":"config_text_out (String) : Text with the simulator mode setting replaced with the Running mode . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__connectc/","text":"mono_connect.vi Description Open a TCP connection given an IP and control port. Inputs Simulator IP (String) : IP of the simulator, typically 127.0.0.1 . Control Port (Int) : Port to write and read messages from the simualor, typically 8999 . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs monoDrive Connection (TCP Network connection) : TCP connection with the simulator. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  connectc"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__connectc/#mono_connectvi","text":"","title":"mono_connect.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__connectc/#description","text":"Open a TCP connection given an IP and control port.","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__connectc/#inputs","text":"Simulator IP (String) : IP of the simulator, typically 127.0.0.1 . Control Port (Int) : Port to write and read messages from the simualor, typically 8999 . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__connectc/#outputs","text":"monoDrive Connection (TCP Network connection) : TCP connection with the simulator. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__headerc/","text":"mono_header.vi Description Parse data from sensor into a cluster, given a TCP connection ID. Inputs connection ID (TCP Network connection): TCP connection ID of a sensor. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs connection ID out (TCP Network connection): TCP connection ID same as input connection ID . sensor_sample(Cluster of cluster): Obtain header information and raw data. Cluster lenght(U32) time_stamp(U32) game_time(SGL) data out (String) error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  headerc"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__headerc/#mono_headervi","text":"","title":"mono_header.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__headerc/#description","text":"Parse data from sensor into a cluster, given a TCP connection ID.","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__headerc/#inputs","text":"connection ID (TCP Network connection): TCP connection ID of a sensor. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__headerc/#outputs","text":"connection ID out (TCP Network connection): TCP connection ID same as input connection ID . sensor_sample(Cluster of cluster): Obtain header information and raw data. Cluster lenght(U32) time_stamp(U32) game_time(SGL) data out (String) error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__initc/","text":"mono__init.vi Description Module to initialize the monoDrive simulator. This module must be run before other simulator configuration/vehicle commands are run. Inputs Simulator IP (string): IP of the simulator, typically 127.0.0.1 . Control Port (int): Port to write and read messages from the simualor, typically 8999 . License Status (Reference): Reference to the license status indicator. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs response : Response from the server. Success : True if the configuration was succesful, otherwise False . connection ID out (TCP Network connection) : TCP connection to the simulator . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  initc"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__initc/#mono__initvi","text":"","title":"mono__init.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__initc/#description","text":"Module to initialize the monoDrive simulator. This module must be run before other simulator configuration/vehicle commands are run.","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__initc/#inputs","text":"Simulator IP (string): IP of the simulator, typically 127.0.0.1 . Control Port (int): Port to write and read messages from the simualor, typically 8999 . License Status (Reference): Reference to the license status indicator. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__initc/#outputs","text":"response : Response from the server. Success : True if the configuration was succesful, otherwise False . connection ID out (TCP Network connection) : TCP connection to the simulator . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__commandc/","text":"mono_send_command.vi Description Send a command via TCP with format \"type\", \"success\", \"reference\", \"message\" Inputs TCP Connecton in (TCP Network connection): TCP connection to the server . JSON Command : JSON format with the following structure: { \"type\": string, \"success\": bool, \"reference\": int, \"message\": JSON, } error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs TCP Connecton out (TCP Network connection) : TCP connection to the simulator. success : True if the configuration was succesful, otherwise False . response : Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  send  commandc"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__commandc/#mono_send_commandvi","text":"","title":"mono_send_command.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__commandc/#description","text":"Send a command via TCP with format \"type\", \"success\", \"reference\", \"message\"","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__commandc/#inputs","text":"TCP Connecton in (TCP Network connection): TCP connection to the server . JSON Command : JSON format with the following structure: { \"type\": string, \"success\": bool, \"reference\": int, \"message\": JSON, } error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__commandc/#outputs","text":"TCP Connecton out (TCP Network connection) : TCP connection to the simulator. success : True if the configuration was succesful, otherwise False . response : Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__simulator__configc/","text":"mono_send_simulator_config.vi Description Configures simulator given a path to a JSON file. The file will configure server ip, port, etc. Inputs TCP Connecton in (TCP Network connection): TCP connection to the server . Simulator Config (Path): Path or name of the file with the Simulator configuration in JSON format. Command_ID (String) : A valid command to the server. Typically SimulatorConfig_ID Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step Outputs TCP Connecton in (TCP Network connection): TCP connection to the server . success (Boolean): True if configuration was succesful, False otherwise . response (String): Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  send  simulator  configc"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__simulator__configc/#mono_send_simulator_configvi","text":"","title":"mono_send_simulator_config.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__simulator__configc/#description","text":"Configures simulator given a path to a JSON file. The file will configure server ip, port, etc.","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__simulator__configc/#inputs","text":"TCP Connecton in (TCP Network connection): TCP connection to the server . Simulator Config (Path): Path or name of the file with the Simulator configuration in JSON format. Command_ID (String) : A valid command to the server. Typically SimulatorConfig_ID Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__simulator__configc/#outputs","text":"TCP Connecton in (TCP Network connection): TCP connection to the server . success (Boolean): True if configuration was succesful, False otherwise . response (String): Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__stepc/","text":"mono_send_step.vi Description Send the command to step the simulation for a given amount. Specify the desired amount in the message string. Inputs TCP Connection in (TCP Network connection) : TCP connection to the server . Command_ID (String) : A valid command to the server. Typically REPLAY_ConfigureSensorsCommand_ID message : a JSON format text. Used in Replay mode and replya_step mode. Replay: A specific amount (1,2,3, etc...) {\"amount\": 1} Replay_step: One frame of a trajectory. Used for HIL. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs TCP Connection in (TCP Network connection) : TCP connection to the server . success (Boolean): True if configuration was succesful, False otherwise . config response (String): Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  send  stepc"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__stepc/#mono_send_stepvi","text":"","title":"mono_send_step.vi"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__stepc/#description","text":"Send the command to step the simulation for a given amount. Specify the desired amount in the message string.","title":"Description"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__stepc/#inputs","text":"TCP Connection in (TCP Network connection) : TCP connection to the server . Command_ID (String) : A valid command to the server. Typically REPLAY_ConfigureSensorsCommand_ID message : a JSON format text. Used in Replay mode and replya_step mode. Replay: A specific amount (1,2,3, etc...) {\"amount\": 1} Replay_step: One frame of a trajectory. Used for HIL. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/simulator/monoDrive_lvlib_mono__send__stepc/#outputs","text":"TCP Connection in (TCP Network connection) : TCP connection to the server . success (Boolean): True if configuration was succesful, False otherwise . config response (String): Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_Error_Fork_Stackerc/","text":"Error_Fork_Stacker.vi Description Report all the errors occurred in the connected elements. Inputs Error Fork A (Error Cluster) : Error cluster from any source. Error Fork B (Error Cluster) : Error cluster from any source. . Outputs Error out (Error Cluster): Error cluster result of two error sources, give information of all the sources.","title":"monoDrive lvlib Error Fork Stackerc"},{"location":"LV_client/utilities/monoDrive_lvlib_Error_Fork_Stackerc/#error_fork_stackervi","text":"","title":"Error_Fork_Stacker.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_Error_Fork_Stackerc/#description","text":"Report all the errors occurred in the connected elements.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_Error_Fork_Stackerc/#inputs","text":"Error Fork A (Error Cluster) : Error cluster from any source. Error Fork B (Error Cluster) : Error cluster from any source. .","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_Error_Fork_Stackerc/#outputs","text":"Error out (Error Cluster): Error cluster result of two error sources, give information of all the sources.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_deserializerc/","text":"deserializer.vi Description Parse a string message to remove newline and escape characters. Inputs JSON in: A JSON format text with extra characters as newline or escape. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs JSON out: A JSON format text without extra characters as newline or escape. . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib deserializerc"},{"location":"LV_client/utilities/monoDrive_lvlib_deserializerc/#deserializervi","text":"","title":"deserializer.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_deserializerc/#description","text":"Parse a string message to remove newline and escape characters.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_deserializerc/#inputs","text":"JSON in: A JSON format text with extra characters as newline or escape. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_deserializerc/#outputs","text":"JSON out: A JSON format text without extra characters as newline or escape. . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__build__jsonc/","text":"mono_build_json.vi Description Builds a JSON message to send via TCP with format \"type\", \"success\", \"reference\", \"message\".a Inputs Message (String): JSON format text. Command_ID (String) : A valid command to the server. Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID Reference (Int): Any integer, typically random generated. Success (Boolean): True if succesful, otherwise False . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Json Out: A valid JSON format message to send to the server with the following structure. { \"type\": string, \"success\": bool, \"reference\": int, \"message\": JSON, } error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  build  jsonc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__build__jsonc/#mono_build_jsonvi","text":"","title":"mono_build_json.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__build__jsonc/#description","text":"Builds a JSON message to send via TCP with format \"type\", \"success\", \"reference\", \"message\".a","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__build__jsonc/#inputs","text":"Message (String): JSON format text. Command_ID (String) : A valid command to the server. Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID Reference (Int): Any integer, typically random generated. Success (Boolean): True if succesful, otherwise False . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__build__jsonc/#outputs","text":"Json Out: A valid JSON format message to send to the server with the following structure. { \"type\": string, \"success\": bool, \"reference\": int, \"message\": JSON, } error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__check__simulatorc/","text":"mono_check_simulator.vi Description Check if the simulator is open and running. If it is not running then it will stop running the client. Inputs error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs cmd_output (String): Output from the command line. Connected (Boolean) : True if the simulator is running. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  check  simulatorc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__check__simulatorc/#mono_check_simulatorvi","text":"","title":"mono_check_simulator.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__check__simulatorc/#description","text":"Check if the simulator is open and running. If it is not running then it will stop running the client.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__check__simulatorc/#inputs","text":"error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__check__simulatorc/#outputs","text":"cmd_output (String): Output from the command line. Connected (Boolean) : True if the simulator is running. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__config__pathc/","text":"mono_get_config_path.vi Description Check if a path is relative or absolute. Decide to pass the name of the file or the path. Inputs Config_Path: Path to a configuration file, by default point to $(User Home directory)/monoDriveConfig . Base_Path: $(User Home directory)/monoDriveConfig. The directory gets created when installing the package. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Config_Path_out: Path to the configuration file. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  get  config  pathc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__config__pathc/#mono_get_config_pathvi","text":"","title":"mono_get_config_path.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__config__pathc/#description","text":"Check if a path is relative or absolute. Decide to pass the name of the file or the path.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__config__pathc/#inputs","text":"Config_Path: Path to a configuration file, by default point to $(User Home directory)/monoDriveConfig . Base_Path: $(User Home directory)/monoDriveConfig. The directory gets created when installing the package. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__config__pathc/#outputs","text":"Config_Path_out: Path to the configuration file. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__framesc/","text":"mono_get_frames.vi Description Modify the information of the EGO vehicle in a given trajectory with external values. Inputs Vehicle_name (String): Vehicle's name obtained from the JSON object attributes. JSON Object (JSON Object): JSON Object (one trajectory) . angular_velocity (Array of DBL) : Desired value for EGO's angular velocity . orientation (Array of DBL): Desired value for EGO's EGO's orientation . position (Array of DBL): Desired value for EGO's position . steering_direction (DBL): Desired value for EGO's steering_direction . velocity (Array of DBL): Desired value for EGO's velocity . Frame_last (String): To use with shift register, last value obtained. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Frame (String): New value for the frame after replacing angular_velocity, orientation, position, steering_direction and velocity of the EGO vehicle with the desired values.. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  get  framesc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__framesc/#mono_get_framesvi","text":"","title":"mono_get_frames.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__framesc/#description","text":"Modify the information of the EGO vehicle in a given trajectory with external values.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__framesc/#inputs","text":"Vehicle_name (String): Vehicle's name obtained from the JSON object attributes. JSON Object (JSON Object): JSON Object (one trajectory) . angular_velocity (Array of DBL) : Desired value for EGO's angular velocity . orientation (Array of DBL): Desired value for EGO's EGO's orientation . position (Array of DBL): Desired value for EGO's position . steering_direction (DBL): Desired value for EGO's steering_direction . velocity (Array of DBL): Desired value for EGO's velocity . Frame_last (String): To use with shift register, last value obtained. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__framesc/#outputs","text":"Frame (String): New value for the frame after replacing angular_velocity, orientation, position, steering_direction and velocity of the EGO vehicle with the desired values.. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__number__trajectoriesc/","text":"mono_get_number_trajectories.vi Description Obtain the number of trajectories on the Trajectory Configuration text. Inputs input_text (String): Text obtained from reading the Trajectory configuration file. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs no.trajectories: Number of trajectories in the text. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  get  number  trajectoriesc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__number__trajectoriesc/#mono_get_number_trajectoriesvi","text":"","title":"mono_get_number_trajectories.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__number__trajectoriesc/#description","text":"Obtain the number of trajectories on the Trajectory Configuration text.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__number__trajectoriesc/#inputs","text":"input_text (String): Text obtained from reading the Trajectory configuration file. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__number__trajectoriesc/#outputs","text":"no.trajectories: Number of trajectories in the text. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__sensor__connectionsc/","text":"mono_get_sensor_connections.vi Description Creates an array of clusters for each type of sensor. Each cluster includes port and connection ID. Inputs Connections_in(TCP Network connection): Connection ID corresponding to the TCP connectios of the sensors. Sensors_type (Array of String): Type name of sensor. \"Camera\", \"Lidar\", \"GPS\", etc... Sensors_ports(Array of Int): Port number for all the sensors. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs IMU (Array of Cluster) : Array of clusters, where each cluster correspond to a different IMU sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this IMU sensor. port (int): System port corresponding to this IMU sensor. Radar (Array of Cluster) : Array of clusters, where each cluster correspond to a different Radar sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Radar sensor. port (int): System port corresponding to this Radar sensor. Camera (Array of Cluster) : Array of clusters, where each cluster correspond to a different Camera sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Camera sensor. port (int): System port corresponding to this Camera sensor. Lidar (Array of Cluster): Array of clusters, where each cluster correspond to a different Lidar sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Lidar sensor. port (int): System port corresponding to this Lidar sensor. GPS (Array of Cluster): Array of clusters, where each cluster correspond to a different GPS sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this GPS sensor. port (int): System port corresponding to this GPS sensor. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  get  sensor  connectionsc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__sensor__connectionsc/#mono_get_sensor_connectionsvi","text":"","title":"mono_get_sensor_connections.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__sensor__connectionsc/#description","text":"Creates an array of clusters for each type of sensor. Each cluster includes port and connection ID.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__sensor__connectionsc/#inputs","text":"Connections_in(TCP Network connection): Connection ID corresponding to the TCP connectios of the sensors. Sensors_type (Array of String): Type name of sensor. \"Camera\", \"Lidar\", \"GPS\", etc... Sensors_ports(Array of Int): Port number for all the sensors. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__sensor__connectionsc/#outputs","text":"IMU (Array of Cluster) : Array of clusters, where each cluster correspond to a different IMU sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this IMU sensor. port (int): System port corresponding to this IMU sensor. Radar (Array of Cluster) : Array of clusters, where each cluster correspond to a different Radar sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Radar sensor. port (int): System port corresponding to this Radar sensor. Camera (Array of Cluster) : Array of clusters, where each cluster correspond to a different Camera sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Camera sensor. port (int): System port corresponding to this Camera sensor. Lidar (Array of Cluster): Array of clusters, where each cluster correspond to a different Lidar sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this Lidar sensor. port (int): System port corresponding to this Lidar sensor. GPS (Array of Cluster): Array of clusters, where each cluster correspond to a different GPS sensor. Cluster with 2 elements: connection ID (TCP Network connection): Connection ID corresponding to the TCP connection for this GPS sensor. port (int): System port corresponding to this GPS sensor. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__simulator__modec/","text":"mono_get_simulator_mode.vi Description Inputs congig_text (String): Text obtained from the simulator config file . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Mode (Int): Mode set in the simulator config file i.e. \"simulation_mode\": 1 this VI will return 1. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  get  simulator  modec"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__simulator__modec/#mono_get_simulator_modevi","text":"","title":"mono_get_simulator_mode.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__simulator__modec/#description","text":"","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__simulator__modec/#inputs","text":"congig_text (String): Text obtained from the simulator config file . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__simulator__modec/#outputs","text":"Mode (Int): Mode set in the simulator config file i.e. \"simulation_mode\": 1 this VI will return 1. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__vehiclesc/","text":"mono_get_vehicles.vi Description Get the name of the vehicles and attributes of each trajectory in JSON format given an index. Inputs Index (Int): The number of trajectory to index from AllTrajectories . Number of current iteration. AllTrajectories (Invariant) : All trajectories obtained from the trajectory config file as a JSON object in LabVIEW. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs AllVehicles (Invariant): All vehicles obtained from the trajectory object as a JSON object in LabVIEW. . EOL (Boolean): True when it reaches the end of the trajectories. Names (Array of String): An array with the names of the Vehicles in the trajectory. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  get  vehiclesc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__vehiclesc/#mono_get_vehiclesvi","text":"","title":"mono_get_vehicles.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__vehiclesc/#description","text":"Get the name of the vehicles and attributes of each trajectory in JSON format given an index.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__vehiclesc/#inputs","text":"Index (Int): The number of trajectory to index from AllTrajectories . Number of current iteration. AllTrajectories (Invariant) : All trajectories obtained from the trajectory config file as a JSON object in LabVIEW. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__get__vehiclesc/#outputs","text":"AllVehicles (Invariant): All vehicles obtained from the trajectory object as a JSON object in LabVIEW. . EOL (Boolean): True when it reaches the end of the trajectories. Names (Array of String): An array with the names of the Vehicles in the trajectory. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__initializationc/","text":"mono_initializationc.vi Description Takes care of initilization given a path to the sensor, simulator and trajectory configuration files. Checks for licensing. Inputs Simulator Config (Path): Path or name of the file with the Simulator configuration in JSON format. Sensor Config (Path): Path or name of the file with the Sensor configuration in JSON format. Trajectory Config (Path): Path or name of the file with the Trajectory configuration in JSON format. SensorsCommand_ID: A valid command to the server. Typically REPLAY_ConfigureSensorsCommand_ID TrajectoryCommand_ID: A valid command to the server. Typically REPLAY_ConfigureTrajectoryCommand_ID Control Port (int): Port to write and read messages from the simualor, typically 8999 . Simulator IP (string): IP of the simulator, typically 127.0.0.1 . Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step Base_Path: $(User Home directory)/monoDriveConfig. The directory gets created when installing the package. Reference indicator(Bundle of Reference) : All the references to indicator of status . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs UDP port (UDP Network Connection): UDP connection to the port where VeloView is listening, typically 2368.- license success : TCP Network Conection out (TCP Network connection): TCP connection to the simulator. Mode (Int): Running mode. AllTrajectories (Invariant): All vehicles obtained from the trajectory object as a JSON object in LabVIEW. trajectories (Int): Number of trajectories obtained from the trajectory configuration file. ports (Array of Int): Array with all the ports numbers for sensors specified in the Sensor config file. Connections (Array of TCP Network connection): Array with all the TCP connections opened for sensors specified in the Sensor config file. address (Int): Local address . Sensors (Array of String): Array with the type name of all the sensors specified in the Sensor config file. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  initializationc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__initializationc/#mono_initializationcvi","text":"","title":"mono_initializationc.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__initializationc/#description","text":"Takes care of initilization given a path to the sensor, simulator and trajectory configuration files. Checks for licensing.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__initializationc/#inputs","text":"Simulator Config (Path): Path or name of the file with the Simulator configuration in JSON format. Sensor Config (Path): Path or name of the file with the Sensor configuration in JSON format. Trajectory Config (Path): Path or name of the file with the Trajectory configuration in JSON format. SensorsCommand_ID: A valid command to the server. Typically REPLAY_ConfigureSensorsCommand_ID TrajectoryCommand_ID: A valid command to the server. Typically REPLAY_ConfigureTrajectoryCommand_ID Control Port (int): Port to write and read messages from the simualor, typically 8999 . Simulator IP (string): IP of the simulator, typically 127.0.0.1 . Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step Base_Path: $(User Home directory)/monoDriveConfig. The directory gets created when installing the package. Reference indicator(Bundle of Reference) : All the references to indicator of status . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__initializationc/#outputs","text":"UDP port (UDP Network Connection): UDP connection to the port where VeloView is listening, typically 2368.- license success : TCP Network Conection out (TCP Network connection): TCP connection to the simulator. Mode (Int): Running mode. AllTrajectories (Invariant): All vehicles obtained from the trajectory object as a JSON object in LabVIEW. trajectories (Int): Number of trajectories obtained from the trajectory configuration file. ports (Array of Int): Array with all the ports numbers for sensors specified in the Sensor config file. Connections (Array of TCP Network connection): Array with all the TCP connections opened for sensors specified in the Sensor config file. address (Int): Local address . Sensors (Array of String): Array with the type name of all the sensors specified in the Sensor config file. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__matlab__plot__radarc/","text":"mono_matlab_plot_radar.vi Description Process radar data cube and run a Matlab script to plot Radar data. Inputs radar data cube (String): Raw data. Radar_data (Cluster): Cluster with the processed data for the Radar sensor. Type Name I32 time_stamp I32 game_time 1D Array SGL ranges 1D Array SGL aoa_list 1D Array SGL velocities - error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  matlab  plot  radarc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__matlab__plot__radarc/#mono_matlab_plot_radarvi","text":"","title":"mono_matlab_plot_radar.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__matlab__plot__radarc/#description","text":"Process radar data cube and run a Matlab script to plot Radar data.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__matlab__plot__radarc/#inputs","text":"radar data cube (String): Raw data. Radar_data (Cluster): Cluster with the processed data for the Radar sensor. Type Name I32 time_stamp I32 game_time 1D Array SGL ranges 1D Array SGL aoa_list 1D Array SGL velocities - error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__matlab__plot__radarc/#outputs","text":"error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__remove__response__message/","text":"mono_remove_response_message.vi Description Remove curly braces from the \"message\" section of the simulator's response Inputs response_json (String): Response of the server. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs json_generated (String): Response of the server after removing curly braces in the \"message\"section. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  remove  response  message"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__remove__response__message/#mono_remove_response_messagevi","text":"","title":"mono_remove_response_message.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__remove__response__message/#description","text":"Remove curly braces from the \"message\" section of the simulator's response","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__remove__response__message/#inputs","text":"response_json (String): Response of the server. error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__remove__response__message/#outputs","text":"json_generated (String): Response of the server after removing curly braces in the \"message\"section. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__sensor__parserc/","text":"mono_sensor_parser.vi Description Gets Sensor type and ports from the configuration text. Inputs Sensor_config (String): Text obtained from reading the Sensor configuration file. Type (String): Tag used in the Sensor configuration file: \"type\" Port (String): Tag used in the Sensor configuration file: \"listen_port\" error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs Sensor (String): Type name of sensor . Remain_string (String): To be used with shift register. Remainding text. Port out (Int): Port obtained . EOL (Boolean): End of the file . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  sensor  parserc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__sensor__parserc/#mono_sensor_parservi","text":"","title":"mono_sensor_parser.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__sensor__parserc/#description","text":"Gets Sensor type and ports from the configuration text.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__sensor__parserc/#inputs","text":"Sensor_config (String): Text obtained from reading the Sensor configuration file. Type (String): Tag used in the Sensor configuration file: \"type\" Port (String): Tag used in the Sensor configuration file: \"listen_port\" error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__sensor__parserc/#outputs","text":"Sensor (String): Type name of sensor . Remain_string (String): To be used with shift register. Remainding text. Port out (Int): Port obtained . EOL (Boolean): End of the file . error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__set__defaultsc/","text":"mono__set__defaultsc.vi Description Set the indicators to default state given a reference to the front panel indicators. Inputs Reference indicator : All the references to indicator of status . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  set  defaultsc"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__set__defaultsc/#mono__set__defaultscvi","text":"","title":"mono__set__defaultsc.vi"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__set__defaultsc/#description","text":"Set the indicators to default state given a reference to the front panel indicators.","title":"Description"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__set__defaultsc/#inputs","text":"Reference indicator : All the references to indicator of status . error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/utilities/monoDrive_lvlib_mono__set__defaultsc/#outputs","text":"error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__trajectoryc/","text":"mono_send_trajectory.vi Description Configure the trajectory EGO and other cars in the scene will follow by given a path to JSON file. Inputs TCP Connection in (TCP Network connection) : TCP connection to the server . Trajectory Config (Path): Path or name of the file with the Sensor configuration in JSON format. Reference indicator ( Bundle of Reference): All the references to indicator of status . Command_ID (String) : A valid command to the server. Typically REPLAY_ConfigureTrajectoryCommand_ID Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs config response (String): Response from the server. TCP Connection Out (TCP Network connection): TCP connection to the server. trajectory config (Boolean): True if configuration was succesful, False otherwise . AllTrajectories (Boolean): JSON object with the trajectories read from the configuration file . Loading (Boolean) : True when the files is being converted to JSON object . trajectories(Int) : Number of trajectories in the configuration file. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  send  trajectoryc"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__trajectoryc/#mono_send_trajectoryvi","text":"","title":"mono_send_trajectory.vi"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__trajectoryc/#description","text":"Configure the trajectory EGO and other cars in the scene will follow by given a path to JSON file.","title":"Description"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__trajectoryc/#inputs","text":"TCP Connection in (TCP Network connection) : TCP connection to the server . Trajectory Config (Path): Path or name of the file with the Sensor configuration in JSON format. Reference indicator ( Bundle of Reference): All the references to indicator of status . Command_ID (String) : A valid command to the server. Typically REPLAY_ConfigureTrajectoryCommand_ID Valid commands Status_ID SimulatorConfig_ID EgoVehicleConfig_ID StreamData_ID WaypointUpdate_ID ScenarioInit_ID ScenarioConfig_ID MapCommand_ID EgoControl_ID UpdateActorCommand_ID StartAllSensorsCommand_ID StopAllSensorsCommand_ID DetachSensorCommand_ID AttachSensorCommand_ID SpawnActorCommand_ID REPLAY_ConfigureSensorsCommand_ID REPLAY_StepSimulationCommand_ID REPLAY_ConfigureTrajectoryCommand_ID REPLAY_StateStepSimulationCommand_ID Running mode (Enum) 0 - Closed_loop 1 - Replay 2 - Replay_step error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__trajectoryc/#outputs","text":"config response (String): Response from the server. TCP Connection Out (TCP Network connection): TCP connection to the server. trajectory config (Boolean): True if configuration was succesful, False otherwise . AllTrajectories (Boolean): JSON object with the trajectories read from the configuration file . Loading (Boolean) : True when the files is being converted to JSON object . trajectories(Int) : Number of trajectories in the configuration file. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__vehicle__commandc/","text":"mono_send_vehicle_command.vi Description Sends a command to the monoDrive Simulator to control the movement of ego vehicle. Inputs TCP Connecton in (TCP Network connection): TCP connection to the server . forward_amount: a value between -1.0 and 1.0 that determines the amount of throttle to apply. right_amount : a value between -1.0 and 1.0 that determines the steering position (-1 is left, +1 is right). error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs. Outputs TCP Connecton out (TCP Network connection): TCP connection to the server . success (Boolean): True if configuration was succesful, False otherwise . vehicle command response (String): Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"monoDrive lvlib mono  send  vehicle  commandc"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__vehicle__commandc/#mono_send_vehicle_commandvi","text":"","title":"mono_send_vehicle_command.vi"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__vehicle__commandc/#description","text":"Sends a command to the monoDrive Simulator to control the movement of ego vehicle.","title":"Description"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__vehicle__commandc/#inputs","text":"TCP Connecton in (TCP Network connection): TCP connection to the server . forward_amount: a value between -1.0 and 1.0 that determines the amount of throttle to apply. right_amount : a value between -1.0 and 1.0 that determines the steering position (-1 is left, +1 is right). error in (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Inputs"},{"location":"LV_client/vehicle/monoDrive_lvlib_mono__send__vehicle__commandc/#outputs","text":"TCP Connecton out (TCP Network connection): TCP connection to the server . success (Boolean): True if configuration was succesful, False otherwise . vehicle command response (String): Response from the server. error out (Error Cluster): Can accept error information wired from VIs previously called. Use this information to decide if any functionality should be bypassed in the event of errors from other VIs.","title":"Outputs"}]}